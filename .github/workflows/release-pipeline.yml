name: Release Pipeline

on:
  pull_request:
    branches:
      - release
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-tests:
    name: Run Specified Apex Tests (Fast)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli
          sf version

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.SF_DEV_AUTH_URL }}" > auth.txt
          sf org login sfdx-url --sfdx-url-file auth.txt --set-default --alias ciOrg
          sf org display user --target-org ciOrg

      - name: Read test classes from manifest
        id: read-tests
        run: |
          if [ ! -f ".github/tests/test-classes.txt" ]; then
            echo "❌ Test manifest not found at .github/tests/test-classes.txt"
            exit 1
          fi
          
          TEST_CLASSES=$(cat .github/tests/test-classes.txt | grep -v '^$' | sort -u | awk '{printf "--tests %s ", $0}')
          echo "test_classes=$TEST_CLASSES" >> $GITHUB_OUTPUT
          echo "📋 Tests to run (count: $(cat .github/tests/test-classes.txt | grep -v '^$' | sort -u | wc -l))"

      - name: Run tests (without coverage for speed)
        id: run-tests
        run: |
          echo "🧪 Running tests without coverage (fast mode)..."
          sf apex run test --target-org ciOrg \
            ${{ steps.read-tests.outputs.test_classes }} \
            --wait 10 \
            --result-format human

      - name: Comment on PR - Tests Passed
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All specified Apex tests passed! PR will auto-merge.\n\n📊 Code coverage will be validated during promotion to main.'
            })

      - name: Comment on PR - Tests Failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Apex tests failed. Please fix the failing tests before merging.\n\nCheck the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })

  auto-merge-and-promote:
    name: Merge to Release & Promote to Main
    runs-on: ubuntu-latest
    needs: validate-tests
    if: ${{ success() }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge PR to release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'merge'
              });
              console.log('✅ PR merged to release branch');
            } catch (error) {
              core.setFailed(`Failed to merge PR: ${error.message}`);
            }

      - name: Wait for merge to complete
        run: sleep 5

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli
          sf version

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.SF_DEV_AUTH_URL }}" > auth.txt
          sf org login sfdx-url --sfdx-url-file auth.txt --set-default --alias ciOrg
          sf org display user --target-org ciOrg

      - name: Read test classes for coverage check
        id: read-tests-coverage
        run: |
          TEST_CLASSES=$(cat .github/tests/test-classes.txt | grep -v '^$' | sort -u | awk '{printf "--tests %s ", $0}')
          echo "test_classes=$TEST_CLASSES" >> $GITHUB_OUTPUT

      - name: Run tests WITH coverage (thorough check)
        id: run-coverage
        run: |
          echo "🧪 Running tests with code coverage (thorough mode)..."
          sf apex run test --target-org ciOrg \
            ${{ steps.read-tests-coverage.outputs.test_classes }} \
            --wait 10 \
            --result-format json \
            --code-coverage > test-results.json
          
          cat test-results.json

      - name: Validate code coverage (must be ≥ ${{ vars.COVERAGE_TARGET }}%)
        run: |
          echo "📊 Checking test run coverage..."

          if [ ! -f test-results.json ]; then
            echo "❌ test-results.json file not found!"
            exit 1
          fi

          # Extract test run coverage
          TEST_RUN=$(jq -r '.result.summary.testRunCoverage' test-results.json)
          ORG_WIDE=$(jq -r '.result.summary.orgWideCoverage' test-results.json)

          echo "🧪 Test run coverage: $TEST_RUN"
          echo "🏛️ Org-wide coverage: $ORG_WIDE"

          # Convert TEST_RUN to numeric
          COVERAGE_NUM=$(echo "$TEST_RUN" | tr -d '%')
          THRESHOLD=${{ vars.COVERAGE_TARGET || 75 }}

          if (( $(echo "$COVERAGE_NUM < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage ($TEST_RUN) is below threshold ($THRESHOLD%)"
            exit 1
          else
            echo "✅ Coverage check passed ($TEST_RUN ≥ $THRESHOLD%)"
          fi

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch latest changes
        run: |
          git fetch origin main
          git fetch origin release

      - name: Checkout main branch
        run: git checkout main

      - name: Merge release into main
        run: |
          git merge origin/release --no-edit
          echo "✅ Merged release into main"

      - name: Push changes to main
        run: |
          git push origin main
          echo "✅ Pushed changes to main"

      - name: Create Release Tag
        run: |
          VERSION="v$(date +'%Y.%m.%d')-${{ github.run_number }}"
          
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "⚠️ Tag $VERSION already exists, skipping tag creation"
          else
            git tag -a "$VERSION" -m "Release $VERSION"
            git push origin "$VERSION"
            echo "📦 Created release tag: $VERSION"
          fi

      - name: Comment on PR - Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResults = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
            const testRunCoverage = testResults.result?.summary?.testRunCoverage || 'N/A';
            const orgWideCoverage = testResults.result?.summary?.orgWideCoverage || 'N/A';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎉 **Release Pipeline Complete!**\n\n✅ Merged to release\n✅ Code coverage validation passed (≥${{ vars.COVERAGE_TARGET || 75 }}%)\n✅ Promoted to main\n✅ Release tag created\n\n📊 **Coverage Results:**\n- Test Run Coverage: ${testRunCoverage}\n- Org-wide Coverage: ${orgWideCoverage}`
            })

      - name: Comment on PR - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Failed during coverage check, merge, or promotion. Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })